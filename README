* Pieces
** How dependencies are dealt with
   A package lists its dependencies by name. If they are not
   installed, there are three options

   'fail - The installation fails

   'force - The installation is forced

   'search - The dependencies are search for on the PNS

   The default will be 'search for installations from the PNS and
   'fail for all other installations.
** Where do I find out about packages?
   The official PNS will additionally present an human interface on
   the package database.
+
   The PNS will reserve all packages matching #rx"^racket.*"
   and #rx"^plt.*" for use by PLT.

   It will define a special set of metadata and rules about them.

   Modifiable by the author only:

   'description - A string description of the package

   'contact - A string for the email address (or other contact details
   of the author)

   'home-url - Website URL

   'problem-url - Problem report URL

   'doc-url - Documentation URL

   'license - A string specifying the license

   'obsoleted-by - A string specifying a new package providing
   similar or better functionality. If core Racket provides the
   functionality, then the fake package "racket-core-version" should
   be used.

   'core-dependency - Two maybe-strings specifying the range of core Racket
   versions the packages works with. The value #f specifies an
   unbounded range on that side.

   Modifiable by PLT only:

   'trusted - A boolean signifying if the package has been vetted by
   PLT

   Updated by the public:

   'likes - A number that can go up only

   'tags - A list of strings that can be added to by anyone and
   removed by only the author and PLT

   Updated by the PNS only:

   'last-update - The last time the package was modified

   'live - True if the package source URL is accessible

** Updating packages (client)
   When updating a package, the original source is consulted for a new
   checksum that is compared with the checksum of the package that is
   installed. If they are different, an update is available.

   Updates may come with new metadata (such as dependencies) and thus
   could lead to further installations. In such a case, the normal
   installation rules apply.

   The client will have access to

   update         -- Only the named packages are checked
   update --deps  -- The named packages and deps are checked
   update --all   -- All installed packages are checked

** Other package management
   remove               -- Remove a package
   
   remove --auto        -- Remove packages that were installed as dependencies
   for removed packages

   export               -- Extract an archive of a package

   export-distribution  -- Extract all packages and core into a saved
   version of the installation

   show                 -- Show installed packages

   create               -- Bundle a directory
** Updating packages (developer)
   For a developer, updating a package entails uploading checksum,
   content, and metadata files to a public URL.

   If the developer is using git, then all pushes will automatically
   result in a new package checksum, contents, etc.

   The official PNS will periodically poll all packages for updates,
   perhaps every day, but an author can manually request a poll at any
   time. The PNS will not poll on behalf of a client, ever.

   Thus, a developer using git can inform the PNS about a package a
   single time and never go back to the site and users will always get
   the most recent versions.
** Planet compatibility server
   In the beginning, we will run a Planet compatibility server that
   presents all existing Planet packages as if they are Galaxy
   packages.

   user/package/major.plt/minor will be presented as
   user-package-major and will provide the collection
   user/package-major.

   So, jaymccarthy/opencl.plt/1/2 will be jaymccarthy-opencl-1 and
   will provide jaymccarthy/opencl-1

   The compatibility server will download the package, automatically
   rewrite obvious planet references to the Galaxy syntax and populate
   the dependencies with the obvious references.

   The automatic translation is likely to break on many packages that
   do exotic or reflective things.
* Things to do before release
** DONE Write the library interface (for DrR usage)
   CLOSED: [2012-10-30 Tue 15:57]
** DONE Test the library interface
   CLOSED: [2012-10-30 Tue 22:30]
** DONE cache downloads during dep search (planet test is unbearable) [or just preserve install-info from one round to the next]
   CLOSED: [2012-10-30 Tue 22:40]
** DONE add an option for calling 'raco setup' (and unify into one place)
   CLOSED: [2012-10-31 Wed 15:26]
** DONE remove tmp dir and just use system's
   CLOSED: [2012-10-31 Wed 15:29]
** DONE Test against the main server
   CLOSED: [2012-10-31 Wed 15:42]
** DONE Finish the main server (style)
   CLOSED: [2012-11-01 Thu 21:53]
** DONE Finish the main server (functionality)
   CLOSED: [2012-11-01 Thu 22:12]
** DONE site - Salty passwords (and mention it)
   CLOSED: [2012-11-03 Sat 11:15]
** DONE site - have install instructions next to each package
   CLOSED: [2012-11-03 Sat 11:33]
** DONE Change name from galaxy to p2
   CLOSED: [2012-11-03 Sat 13:16]
** TODO Write documentation (convert this document but remove single collect packages)
** TODO server - disallow plt and racket prefixes
** TODO Create initial packages (my own)
** TODO Email current popular package owners to help them convert
** TODO Email adm about the project
** TODO Email dev about the deployment
